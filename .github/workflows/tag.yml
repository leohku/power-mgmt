name: Deploy on tag
on:
  push:
    tags:
      - '*'
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      MACHINE: dashboard
      USERNAME: leoho
      RSA_NAME: runner_rsa
    steps:
      # 1. Install system dependencies
      # 2. Configure networking
      - name: Setup Tailscale
        uses: tailscale/github-action@main
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
      - name: Resolve machine IP and RSA key metadata
        id: machine-meta
        run: |
          MACHINE_IP=$(tailscale ip -4 ${MACHINE})
          echo ::set-output name=MACHINE_IP::${MACHINE_IP}
          echo ::set-output name=KNOWN_HOSTS::$(ssh-keyscan -t rsa ${MACHINE_IP})
      - name: Add SSH key and known_hosts
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: ${{ env.RSA_NAME }}
          known_hosts: ${{ steps.machine-meta.outputs.KNOWN_HOSTS }}
      - name: Update ~/.ssh/config file of runner
        run: |
          cat << EOF >> ~/.ssh/config
          Host ${MACHINE}
            HostName ${{ steps.machine-meta.outputs.MACHINE_IP }}
            IdentityFile ~/.ssh/${RSA_NAME}
            AddKeysToAgent yes
            User ${USERNAME}
          EOF
      
      # 3. Add sensitive files
      - name: Fetch code
        uses: actions/checkout@v3
      - name: Write gitignored sensitive files to directory
        run: |
          echo "${NGINX_SSL_CERT_KEY}" >> ./nginx/ssl/dashboard-selfsign.key
        env:
          NGINX_SSL_CERT_KEY: ${{ secrets.NGINX_SSL_CERT_KEY }}
      - name: Write express .env file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_PORT: 8080
          directory: ./express
          file_name: .env
          fail_on_empty: true

      # 4. Build frontend
      - name: Build React SPA
        working-directory: ./spa
        run: |
          yarn
          yarn build
      - name: Move build to Nginx public folder
        run: |
          cp -r ./spa/build ./nginx/public
      
      # 5. Build images
      - name: Get tag from Git refs
        id: get-tag
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
      - name: Build dashboard/express image and tag
        uses: docker/build-push-action@v3
        with:
          context: ./express
          push: false
          tags: dashboard/express:${{ steps.get-tag.outputs.TAG }}
      - name: Build dashboard/nginx image and tag
        uses: docker/build-push-action@v3
        with:
          context: ./nginx
          push: false
          tags: dashboard/nginx:${{ steps.get-tag.outputs.TAG }}
      
      # 6. Transport images and compose file
      - name: Transport and load dashboard/express image
        run: |
          docker save dashboard/express:${{ steps.get-tag.outputs.TAG }} |
          gzip |
          ssh ${MACHINE} docker load
      - name: Transport and load dashboard/nginx image
        run: |
          docker save dashboard/nginx:${{ steps.get-tag.outputs.TAG }} |
          gzip |
          ssh ${MACHINE} docker load
      - name: Transport compose.prod.yaml as compose.yaml
        run: |
          ssh ${MACHINE} "rm -rf ~/tmp-staging || true"
          ssh ${MACHINE} "mkdir ~/tmp-staging"
          scp compose.prod.yaml ${MACHINE}:~/tmp-staging/compose.yaml

      # 7. Deployment
      - name: Prepare new Docker deployment
        run: |
          ssh ${MACHINE} "cd ~/deployment; docker compose down || true"
          ssh ${MACHINE} "rm -rf ~/deployment || true"
          ssh ${MACHINE} "mkdir ~/deployment"
          ssh ${MACHINE} "cp -a ~/tmp-staging/. ~/deployment/"
      - name: Deploy Docker images
        run: |
          TAG=${{ steps.get-tag.outputs.TAG }}
          ssh ${MACHINE} 'export TAG='"'${TAG}'"'; cd ~/deployment; docker compose up -d'
      
      # 8. Cleanup
      - name: Remove staging folder
        run: |
          ssh ${MACHINE} "rm -rf ~/tmp-staging"
      - name: Prune unused Docker images
        run: |
          ssh ${MACHINE} "docker image prune -af"
